{"version":3,"sources":["store/context.js","store/reducer.js","components/Select.js","components/CountryDetail.js","containers/CountriesContainer.js","containers/BucketList.js","serviceWorker.js","index.js","App.js"],"names":["BucketListContext","React","createContext","items","reducer","state","action","type","findIndex","item","payload","addedItems","concat","Object","toConsumableArray","objectSpread","itemsAfterRemove","filter","Select","_ref","countries","onCountrySelected","options","map","country","index","react_default","a","createElement","value","key","name","defaultValue","id","onChange","evt","target","disabled","CountryDetail","dispatch","useContext","className","capital","population","onClick","CountriesContainer","_useState","useState","_useState2","slicedToArray","setCountries","_useState3","_useState4","selectedCountry","setSelectedCountry","useEffect","getData","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","res","json","stop","apply","this","arguments","CountryDetail_CountryDetail","BucketList","_useContext","subTitle","length","Boolean","window","location","hostname","match","ReactDOM","render","initialState","_useReducer","useReducer","bucketListReducer","_useReducer2","context","Provider","CountriesContainer_CountriesContainer","BucketList_BucketList","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f82f42d.chunk.js","sourcesContent":["import React from 'react';\n\nconst BucketListContext = React.createContext({\n  items: []\n})\n\nexport default BucketListContext\n","export default function reducer(state, action){\n  switch(action.type){\n    case 'ADD_COUNTRY':\n    if(state.items.findIndex(item => item === action.payload) > -1){\n      return state\n    }\n    const addedItems = [...state.items, action.payload]\n    return {\n      ...state,\n      items: addedItems\n    }\n    case 'REMOVE':\n    const itemsAfterRemove = state.items.filter(item => item !== action.payload)\n    return {\n      ...state,\n      items: itemsAfterRemove\n    }\n    default:\n    return state;\n  }\n}\n","import React from 'react';\n\nexport default function Select({countries, onCountrySelected}){\n\n  const options = countries.map((country, index) => {\n    return <option value={index} key={country.name}>{country.name}</option>\n  })\n\n  const handleChange = evt => {\n    onCountrySelected(evt.target.value)\n  }\n\n  return (\n    <select defaultValue=\"default\" id=\"country-selector\" onChange={handleChange}>\n      <option disabled value=\"default\">Choose a country...</option>\n      {options}\n    </select>\n  )\n}\n","import React, {useContext} from 'react';\nimport BucketListContext from '../store/context';\nimport './CountryDetail.css'\n\nexport default function CountryDetail({country}){\n  if(!country) return null;\n\n  const { dispatch } = useContext(BucketListContext)\n\n  const handleAdd = () => {\n    dispatch({type: 'ADD_COUNTRY', payload: country.name})\n  }\n\n  return (\n    <div className=\"country-detail\">\n    <h4>{country.name}</h4>\n    <p>Capital: {country.capital}</p>\n    <p>Population: {country.population}</p>\n    <button className=\"btn-add\" onClick={handleAdd}>&#43;</button>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport Select from '../components/Select';\nimport CountryDetail from '../components/CountryDetail';\nimport './CountriesContainer.css'\n\nexport default function CountriesContainer() {\n\n  const [countries, setCountries] = useState([])\n  const [selectedCountry, setSelectedCountry] = useState(null)\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const getData = async () => {\n    await fetch('https://restcountries.eu/rest/v2/all')\n    .then(res => res.json())\n    .then(countries => setCountries(countries))\n  }\n\n  const handleCountrySelected = index => {\n    const country = countries[index]\n    setSelectedCountry(country)\n  }\n\n  return (\n    <div className=\"country-wrapper\">\n    <h2>Countries of the World</h2>\n    <Select countries={countries} onCountrySelected={handleCountrySelected}/>\n    <CountryDetail country={selectedCountry} />\n    </div>\n  )\n\n}\n","import React, { useContext } from 'react';\nimport BucketListContext from '../store/context';\nimport './BucketList.css';\n\nexport default function BucketList(){\n\n  const { state, dispatch } = useContext(BucketListContext)\n  const subTitle = state.items.length > 0 ? null : 'Bucket List empty'\n  const items = state.items.map((item, index) => {\n    return <li key={index}>\n    {item}\n    <button onClick={() => dispatch({type: 'REMOVE', payload: item})} className=\"btn-remove\">X</button>\n    </li>\n  })\n\n  return (\n    <div className=\"bucket-list\">\n    <h2>Bucket List</h2>\n    <p className=\"subtitle\">{subTitle}</p>\n    <ul>\n    {items}\n    </ul>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useContext, useReducer} from 'react';\nimport BucketListContext from './store/context';\nimport bucketListReducer from './store/reducer';\nimport CountriesContainer from './containers/CountriesContainer';\nimport BucketList from './containers/BucketList';\nimport './App.css';\n\nexport default function App(){\n  const initialState = useContext(BucketListContext)\n  const [state, dispatch] = useReducer(bucketListReducer, initialState)\n\n  return (\n    <BucketListContext.Provider value={{state, dispatch}}>\n      <div className=\"container\">\n        <CountriesContainer />\n        <BucketList />\n      </div>\n    </BucketListContext.Provider>\n  )\n}\n"],"sourceRoot":""}